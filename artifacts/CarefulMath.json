{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"g√∂rli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"linkReferences": {},
			"object": "6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a72315820a1521bf535c63c00f96161d740da735e8b37151a9e6e288de839427c136457cc64736f6c63430005110032",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 LOG1 MSTORE SHL CREATE2 CALLDATALOAD 0xC6 EXTCODECOPY STOP 0xF9 PUSH2 0x61D7 BLOCKHASH 0xDA PUSH20 0x5E8B37151A9E6E288DE839427C136457CC64736F PUSH13 0x63430005110032000000000000 ",
			"sourceMap": "21819:1949:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21819:1949:0;;;;;;;"
		},
		"deployedBytecode": {
			"linkReferences": {},
			"object": "6080604052600080fdfea265627a7a72315820a1521bf535c63c00f96161d740da735e8b37151a9e6e288de839427c136457cc64736f6c63430005110032",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 LOG1 MSTORE SHL CREATE2 CALLDATALOAD 0xC6 EXTCODECOPY STOP 0xF9 PUSH2 0x61D7 BLOCKHASH 0xDA PUSH20 0x5E8B37151A9E6E288DE839427C136457CC64736F PUSH13 0x63430005110032000000000000 ",
			"sourceMap": "21819:1949:0:-;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "12400",
				"executionCost": "66",
				"totalCost": "12466"
			},
			"internal": {
				"addThenSubUInt(uint256,uint256,uint256)": "infinite",
				"addUInt(uint256,uint256)": "infinite",
				"divUInt(uint256,uint256)": "infinite",
				"mulUInt(uint256,uint256)": "infinite",
				"subUInt(uint256,uint256)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}